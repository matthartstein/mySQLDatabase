--------------------------------------------------------------------------------
Name:     Matthew S. Hartstein (010567629)
Class:    CSCE 4523: Database Management
Date:     Spring 2020
Synopsis: Homework #3
--------------------------------------------------------------------------------

1.) Show the tables that you have created:
	Answer: mysql> SHOW TABLES;
	+--------------------+
	| Tables_in_mshartst |
	+--------------------+
	| AGENTS             |
	| CLIENTS            |
	| POLICIES_SOLD      |
	| POLICY             |
	+--------------------+
	4 rows in set (0.01 sec)

2.) Show the schema of each table:
	A.) mysql> DESC CLIENTS;
	+--------+----------+------+-----+---------+-------+
	| Field  | Type     | Null | Key | Default | Extra |
	+--------+----------+------+-----+---------+-------+
	| C_ID   | int(11)  | NO   | PRI | NULL    |       |
	| C_NAME | char(50) | NO   |     | NULL    |       |
	| C_CITY | char(50) | NO   |     | NULL    |       |
	| C_ZIP  | int(11)  | NO   |     | NULL    |       |
	+--------+----------+------+-----+---------+-------+
	4 rows in set (0.00 sec)

	B.) mysql> DESC AGENTS;
	+--------+----------+------+-----+---------+-------+
	| Field  | Type     | Null | Key | Default | Extra |
	+--------+----------+------+-----+---------+-------+
	| A_ID   | int(11)  | NO   | PRI | NULL    |       |
	| A_NAME | char(50) | NO   |     | NULL    |       |
	| A_CITY | char(50) | NO   |     | NULL    |       |
	| A_ZIP  | int(11)  | NO   |     | NULL    |       |
	+--------+----------+------+-----+---------+-------+
	4 rows in set (0.00 sec)

	C.) mysql> DESC POLICY;
	+-----------------------+----------+------+-----+---------+-------+
	| Field                 | Type     | Null | Key | Default | Extra |
	+-----------------------+----------+------+-----+---------+-------+
	| POLICY_ID             | int(11)  | NO   | PRI | NULL    |       |
	| NAME                  | char(50) | NO   |     | NULL    |       |
	| TYPE                  | char(50) | NO   |     | NULL    |       |
	| COMMISSION_PERCENTAGE | int(11)  | NO   |     | NULL    |       |
	+-----------------------+----------+------+-----+---------+-------+
	4 rows in set (0.00 sec)

	D.) mysql> DESC POLICIES_SOLD;
	+----------------+--------------+------+-----+---------+-------+
	| Field          | Type         | Null | Key | Default | Extra |
	+----------------+--------------+------+-----+---------+-------+
	| PURCHASE_ID    | int(11)      | NO   | PRI | NULL    |       |
	| AGENT_ID       | int(11)      | YES  | MUL | NULL    |       |
	| CLIENT_ID      | int(11)      | YES  | MUL | NULL    |       |
	| POLICY_ID      | int(11)      | YES  | MUL | NULL    |       |
	| DATE_PURCHASED | date         | NO   |     | NULL    |       |
	| AMOUNT         | decimal(6,2) | NO   |     | NULL    |       |
	+----------------+--------------+------+-----+---------+-------+
	6 rows in set (0.00 sec)

3.) Show how each table was created:
	A.) mysql> CREATE TABLE CLIENTS (
    		-> C_ID INT NOT NULL,
    		-> C_NAME CHAR(50) NOT NULL,
    		-> C_CITY CHAR(50) NOT NULL,
    		-> C_ZIP INT NOT NULL,
    		-> PRIMARY KEY (C_ID));
	Query OK, 0 rows affected (0.00 sec)

	B.) mysql> CREATE TABLE AGENTS (
    		-> A_ID INT NOT NULL,
    		-> A_NAME CHAR(50) NOT NULL,
    		-> A_CITY CHAR(50) NOT NULL,
    		-> A_ZIP INT NOT NULL,
    		-> PRIMARY KEY (A_ID));         
	Query OK, 0 rows affected (0.00 sec)

	C.) mysql> CREATE TABLE POLICY (
    		-> POLICY_ID INT NOT NULL,
    		-> NAME CHAR(50) NOT NULL,
    		-> TYPE CHAR(50) NOT NULL,
    		-> COMMISSION_PERCENTAGE INT NOT NULL,
   	 	-> PRIMARY KEY (POLICY_ID));
	Query OK, 0 rows affected (0.00 sec)

	D.) mysql> CREATE TABLE POLICIES_SOLD (
    		-> PURCHASE_ID INT NOT NULL,
    		-> AGENT_ID INT REFERENCES AGENTS(A_ID),
    		-> CLIENT_ID INT REFERENCES CLIENTS(C_ID),
    		-> POLICY_ID INT REFERENCES POLICY(POLICY_ID),
    		-> DATE_PURCHASED DATE NOT NULL,
    		-> AMOUNT DEC(6,2) NOT NULL,
    		-> PRIMARY KEY (PURCHASE_ID),
    		-> KEY AGENT_ID (AGENT_ID),
    		-> KEY CLIENT_ID (CLIENT_ID),
    		-> KEY POLICY_ID (POLICY_ID),
    		-> CONSTRAINT POLICIES_SOLD_IBFK_1 FOREIGN KEY (AGENT_ID) REFERENCES AGENTS(A_ID),
    		-> CONSTRAINT POLICIES_SOLD_IBFK_2 FOREIGN KEY(CLIENT_ID) REFERENCES CLIENTS(C_ID),
    		-> CONSTRAINT POLICIES_SOLD_IBFK_3 FOREIGN KEY(POLICY_ID) REFERENCES POLICY(POLICY_ID));
	Query OK, 0 rows affected (0.02 sec)

4.) Show the foreign keys of each table:
	Answer: mysql> SELECT COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME 
	FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    		-> WHERE REFERENCED_COLUMN_NAME IS NOT NULL AND CONSTRAINT_SCHEMA = 'mshartst';
	+-------------+----------------------+------------------------+-----------------------+
	| COLUMN_NAME | CONSTRAINT_NAME      | REFERENCED_COLUMN_NAME | REFERENCED_TABLE_NAME |
	+-------------+----------------------+------------------------+-----------------------+
	| AGENT_ID    | POLICIES_SOLD_IBFK_1 | A_ID                   | AGENTS                |
	| CLIENT_ID   | POLICIES_SOLD_IBFK_2 | C_ID                   | CLIENTS               |
	| POLICY_ID   | POLICIES_SOLD_IBFK_3 | POLICY_ID              | POLICY                |
	+-------------+----------------------+------------------------+-----------------------+
	3 rows in set (0.02 sec)

5.) Show all the records within every table:
	A.) mysql> SELECT * FROM CLIENTS;
	+------+--------+--------------+-------+
	| C_ID | C_NAME | C_CITY       | C_ZIP |
	+------+--------+--------------+-------+
	|  101 | CHRIS  | DALLAS       | 43214 |
	|  102 | OLIVIA | BOSTON       | 83125 |
	|  103 | ETHAN  | FAYETTEVILLE | 72701 |
	|  104 | DANIEL | NEWYORK      | 53421 |
	|  105 | TAYLOR | ROGERS       | 78291 |
	|  106 | CLAIRE | PHOENIX      | 85011 |
	+------+--------+--------------+-------+
	6 rows in set (0.00 sec)

	B.) mysql> SELECT * FROM AGENTS;
	+------+--------+--------------+-------+
	| A_ID | A_NAME | A_CITY       | A_ZIP |
	+------+--------+--------------+-------+
	|  201 | ANDREW | DALLAS       | 43214 |
	|  202 | PHILIP | PHOENIX      | 85011 |
	|  203 | JERRY  | BOSTON       | 83125 |
	|  204 | BRYAN  | ROGERS       | 78291 |
	|  205 | TOMMY  | DALLAS       | 43214 |
	|  206 | BRANT  | FAYETTEVILLE | 72701 |
	|  207 | SMITH  | ROGERS       | 78291 |
	+------+--------+--------------+-------+
	7 rows in set (0.00 sec)

	C.) mysql> SELECT * FROM POLICY;
	+-----------+--------------+---------+-----------------------+
	| POLICY_ID | NAME         | TYPE    | COMMISSION_PERCENTAGE |
	+-----------+--------------+---------+-----------------------+
	|       301 | CIGNAHEALTH  | DENTAL  |                     5 |
	|       302 | GOLD         | LIFE    |                     8 |
	|       303 | WELLCARE     | HOME    |                    10 |
	|       304 | UNITEDHEALTH | HEALTH  |                     7 |
	|       305 | UNITEDCAR    | VEHICLE |                     9 |
	+-----------+--------------+---------+-----------------------+
	5 rows in set (0.00 sec)

	D.) mysql> SELECT * FROM POLICIES_SOLD;
	+-------------+----------+-----------+-----------+----------------+---------+
	| PURCHASE_ID | AGENT_ID | CLIENT_ID | POLICY_ID | DATE_PURCHASED | AMOUNT  |
	+-------------+----------+-----------+-----------+----------------+---------+
	|         401 |      204 |       106 |       303 | 2020-01-02     | 2000.00 |
	|         402 |      201 |       105 |       305 | 2019-08-11     | 1500.00 |
	|         403 |      203 |       106 |       301 | 2019-09-08     | 3000.00 |
	|         404 |      207 |       101 |       305 | 2019-06-21     | 1500.00 |
	|         405 |      203 |       104 |       302 | 2019-11-14     | 4500.00 |
	|         406 |      207 |       105 |       305 | 2019-12-25     | 1500.00 |
	|         407 |      205 |       103 |       304 | 2020-10-15     | 5000.00 |
	|         408 |      204 |       103 |       304 | 2020-02-15     | 5000.00 |
	|         409 |      203 |       103 |       304 | 2020-01-10     | 5000.00 |
	|         410 |      202 |       103 |       303 | 2020-01-30     | 2000.00 |
	+-------------+----------+-----------+-----------+----------------+---------+
	10 rows in set (0.00 sec)

--------------------------------------------------------------------------------
For each of the following, output the query and the results of running the query.
--------------------------------------------------------------------------------

6.) A client named 'Taylor' wants to see if there are any agents availble in her
    city. Write a query to display agent id, agent name, agent city, and agent
    zip of all available agents in Taylor's city; hint-find Taylor's city/zip
    using her name and then find agents in her city/zip:

	SELECT A_NAME, A_CITY, A_ZIP 
	FROM AGENTS a 
	INNER JOIN CLIENTS c 
		on c.C_NAME = 'TAYLOR' and a.A_CITY = c.C_CITY;

	+--------+--------+-------+
	| A_NAME | A_CITY | A_ZIP |
	+--------+--------+-------+
	| BRYAN  | ROGERS | 78291 |
	| SMITH  | ROGERS | 78291 |
	+--------+--------+-------+
	2 rows in set (0.00 sec)

7.) Find out the second-highest commission percentage. Output the name of the
    policy, its type and the comission percentage associated with it:

	SELECT * 
	FROM POLICY 
	ORDER BY COMMISSION_PERCENTAGE 
	DESC LIMIT 1,1;

	+-----------+-----------+---------+-----------------------+
	| POLICY_ID | NAME      | TYPE    | COMMISSION_PERCENTAGE |
	+-----------+-----------+---------+-----------------------+
	|       305 | UNITEDCAR | VEHICLE |                     9 |
	+-----------+-----------+---------+-----------------------+
	1 row in set (0.00 sec)

8.) Find out which type of policies have been sold in Fayetteville. Output the
    name of the policy, its type, and number of times the policy has been sold.

	SELECT p.NAME, p.TYPE, count(p.POLICY_ID) as NUM_SOLD
	FROM POLICY p
	INNER JOIN CLIENTS c
	  on c.C_CITY = 'FAYETTEVILLE' 
	INNER JOIN POLICIES_SOLD ps
	  on ps.CLIENT_ID = c.C_ID
	  and p.POLICY_ID = ps.POLICY_ID
	GROUP BY p.POLICY_ID;

	+--------------+--------+----------+
	| NAME         | TYPE   | NUM_SOLD |
	+--------------+--------+----------+
	| WELLCARE     | HOME   |        1 |
	| UNITEDHEALTH | HEALTH |        3 |
	+--------------+--------+----------+
	2 rows in set (0.00 sec)

9.) Find out the most frequently sold policy in the year 2020 (based on the # of
    times the policy has been sold). Output the name of the policy, its type,
    and its frequency as 'COUNT': ???

10.) Using the Commission percentage we have for each policy in the policy table,
     find out how much each agent earned through commissions from selling the
     policies. Sort them in decreasing order. Output the agent's name and amount
     they earned from commissions: ???